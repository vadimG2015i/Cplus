// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpctest.proto

#ifndef PROTOBUF_grpctest_2eproto__INCLUDED
#define PROTOBUF_grpctest_2eproto__INCLUDED
#define _WIN32_WINNT 0x0600
#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_grpctest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGetTimeRequestImpl();
void InitDefaultsGetTimeRequest();
void InitDefaultsGetTimeResponseImpl();
void InitDefaultsGetTimeResponse();
void InitDefaultsGetServerNameRequestImpl();
void InitDefaultsGetServerNameRequest();
void InitDefaultsGetServerNameResponseImpl();
void InitDefaultsGetServerNameResponse();
void InitDefaultsConvertRequestImpl();
void InitDefaultsConvertRequest();
void InitDefaultsConvertResponseImpl();
void InitDefaultsConvertResponse();
inline void InitDefaults() {
  InitDefaultsGetTimeRequest();
  InitDefaultsGetTimeResponse();
  InitDefaultsGetServerNameRequest();
  InitDefaultsGetServerNameResponse();
  InitDefaultsConvertRequest();
  InitDefaultsConvertResponse();
}
}  // namespace protobuf_grpctest_2eproto
namespace GRPCTestApi {
class ConvertRequest;
class ConvertRequestDefaultTypeInternal;
extern ConvertRequestDefaultTypeInternal _ConvertRequest_default_instance_;
class ConvertResponse;
class ConvertResponseDefaultTypeInternal;
extern ConvertResponseDefaultTypeInternal _ConvertResponse_default_instance_;
class GetServerNameRequest;
class GetServerNameRequestDefaultTypeInternal;
extern GetServerNameRequestDefaultTypeInternal _GetServerNameRequest_default_instance_;
class GetServerNameResponse;
class GetServerNameResponseDefaultTypeInternal;
extern GetServerNameResponseDefaultTypeInternal _GetServerNameResponse_default_instance_;
class GetTimeRequest;
class GetTimeRequestDefaultTypeInternal;
extern GetTimeRequestDefaultTypeInternal _GetTimeRequest_default_instance_;
class GetTimeResponse;
class GetTimeResponseDefaultTypeInternal;
extern GetTimeResponseDefaultTypeInternal _GetTimeResponse_default_instance_;
}  // namespace GRPCTestApi
namespace GRPCTestApi {

// ===================================================================

class GetTimeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GRPCTestApi.GetTimeRequest) */ {
 public:
  GetTimeRequest();
  virtual ~GetTimeRequest();

  GetTimeRequest(const GetTimeRequest& from);

  inline GetTimeRequest& operator=(const GetTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTimeRequest(GetTimeRequest&& from) noexcept
    : GetTimeRequest() {
    *this = ::std::move(from);
  }

  inline GetTimeRequest& operator=(GetTimeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTimeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTimeRequest* internal_default_instance() {
    return reinterpret_cast<const GetTimeRequest*>(
               &_GetTimeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetTimeRequest* other);
  friend void swap(GetTimeRequest& a, GetTimeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTimeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTimeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTimeRequest& from);
  void MergeFrom(const GetTimeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTimeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string currenttime = 1;
  void clear_currenttime();
  static const int kCurrenttimeFieldNumber = 1;
  const ::std::string& currenttime() const;
  void set_currenttime(const ::std::string& value);
  #if LANG_CXX11
  void set_currenttime(::std::string&& value);
  #endif
  void set_currenttime(const char* value);
  void set_currenttime(const char* value, size_t size);
  ::std::string* mutable_currenttime();
  ::std::string* release_currenttime();
  void set_allocated_currenttime(::std::string* currenttime);

  // @@protoc_insertion_point(class_scope:GRPCTestApi.GetTimeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr currenttime_;
  mutable int _cached_size_;
  friend struct ::protobuf_grpctest_2eproto::TableStruct;
  friend void ::protobuf_grpctest_2eproto::InitDefaultsGetTimeRequestImpl();
};
// -------------------------------------------------------------------

class GetTimeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GRPCTestApi.GetTimeResponse) */ {
 public:
  GetTimeResponse();
  virtual ~GetTimeResponse();

  GetTimeResponse(const GetTimeResponse& from);

  inline GetTimeResponse& operator=(const GetTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTimeResponse(GetTimeResponse&& from) noexcept
    : GetTimeResponse() {
    *this = ::std::move(from);
  }

  inline GetTimeResponse& operator=(GetTimeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTimeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTimeResponse* internal_default_instance() {
    return reinterpret_cast<const GetTimeResponse*>(
               &_GetTimeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetTimeResponse* other);
  friend void swap(GetTimeResponse& a, GetTimeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTimeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTimeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTimeResponse& from);
  void MergeFrom(const GetTimeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTimeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string currenttime = 1;
  void clear_currenttime();
  static const int kCurrenttimeFieldNumber = 1;
  const ::std::string& currenttime() const;
  void set_currenttime(const ::std::string& value);
  #if LANG_CXX11
  void set_currenttime(::std::string&& value);
  #endif
  void set_currenttime(const char* value);
  void set_currenttime(const char* value, size_t size);
  ::std::string* mutable_currenttime();
  ::std::string* release_currenttime();
  void set_allocated_currenttime(::std::string* currenttime);

  // @@protoc_insertion_point(class_scope:GRPCTestApi.GetTimeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr currenttime_;
  mutable int _cached_size_;
  friend struct ::protobuf_grpctest_2eproto::TableStruct;
  friend void ::protobuf_grpctest_2eproto::InitDefaultsGetTimeResponseImpl();
};
// -------------------------------------------------------------------

class GetServerNameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GRPCTestApi.GetServerNameRequest) */ {
 public:
  GetServerNameRequest();
  virtual ~GetServerNameRequest();

  GetServerNameRequest(const GetServerNameRequest& from);

  inline GetServerNameRequest& operator=(const GetServerNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServerNameRequest(GetServerNameRequest&& from) noexcept
    : GetServerNameRequest() {
    *this = ::std::move(from);
  }

  inline GetServerNameRequest& operator=(GetServerNameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerNameRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerNameRequest*>(
               &_GetServerNameRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetServerNameRequest* other);
  friend void swap(GetServerNameRequest& a, GetServerNameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServerNameRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServerNameRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServerNameRequest& from);
  void MergeFrom(const GetServerNameRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServerNameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:GRPCTestApi.GetServerNameRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_grpctest_2eproto::TableStruct;
  friend void ::protobuf_grpctest_2eproto::InitDefaultsGetServerNameRequestImpl();
};
// -------------------------------------------------------------------

class GetServerNameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GRPCTestApi.GetServerNameResponse) */ {
 public:
  GetServerNameResponse();
  virtual ~GetServerNameResponse();

  GetServerNameResponse(const GetServerNameResponse& from);

  inline GetServerNameResponse& operator=(const GetServerNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServerNameResponse(GetServerNameResponse&& from) noexcept
    : GetServerNameResponse() {
    *this = ::std::move(from);
  }

  inline GetServerNameResponse& operator=(GetServerNameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerNameResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerNameResponse*>(
               &_GetServerNameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetServerNameResponse* other);
  friend void swap(GetServerNameResponse& a, GetServerNameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServerNameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServerNameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServerNameResponse& from);
  void MergeFrom(const GetServerNameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServerNameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:GRPCTestApi.GetServerNameResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_grpctest_2eproto::TableStruct;
  friend void ::protobuf_grpctest_2eproto::InitDefaultsGetServerNameResponseImpl();
};
// -------------------------------------------------------------------

class ConvertRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GRPCTestApi.ConvertRequest) */ {
 public:
  ConvertRequest();
  virtual ~ConvertRequest();

  ConvertRequest(const ConvertRequest& from);

  inline ConvertRequest& operator=(const ConvertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvertRequest(ConvertRequest&& from) noexcept
    : ConvertRequest() {
    *this = ::std::move(from);
  }

  inline ConvertRequest& operator=(ConvertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvertRequest* internal_default_instance() {
    return reinterpret_cast<const ConvertRequest*>(
               &_ConvertRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ConvertRequest* other);
  friend void swap(ConvertRequest& a, ConvertRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvertRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvertRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvertRequest& from);
  void MergeFrom(const ConvertRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string conv = 1;
  void clear_conv();
  static const int kConvFieldNumber = 1;
  const ::std::string& conv() const;
  void set_conv(const ::std::string& value);
  #if LANG_CXX11
  void set_conv(::std::string&& value);
  #endif
  void set_conv(const char* value);
  void set_conv(const char* value, size_t size);
  ::std::string* mutable_conv();
  ::std::string* release_conv();
  void set_allocated_conv(::std::string* conv);

  // @@protoc_insertion_point(class_scope:GRPCTestApi.ConvertRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr conv_;
  mutable int _cached_size_;
  friend struct ::protobuf_grpctest_2eproto::TableStruct;
  friend void ::protobuf_grpctest_2eproto::InitDefaultsConvertRequestImpl();
};
// -------------------------------------------------------------------

class ConvertResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GRPCTestApi.ConvertResponse) */ {
 public:
  ConvertResponse();
  virtual ~ConvertResponse();

  ConvertResponse(const ConvertResponse& from);

  inline ConvertResponse& operator=(const ConvertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvertResponse(ConvertResponse&& from) noexcept
    : ConvertResponse() {
    *this = ::std::move(from);
  }

  inline ConvertResponse& operator=(ConvertResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvertResponse* internal_default_instance() {
    return reinterpret_cast<const ConvertResponse*>(
               &_ConvertResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ConvertResponse* other);
  friend void swap(ConvertResponse& a, ConvertResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvertResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvertResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvertResponse& from);
  void MergeFrom(const ConvertResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvertResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string conv = 1;
  void clear_conv();
  static const int kConvFieldNumber = 1;
  const ::std::string& conv() const;
  void set_conv(const ::std::string& value);
  #if LANG_CXX11
  void set_conv(::std::string&& value);
  #endif
  void set_conv(const char* value);
  void set_conv(const char* value, size_t size);
  ::std::string* mutable_conv();
  ::std::string* release_conv();
  void set_allocated_conv(::std::string* conv);

  // @@protoc_insertion_point(class_scope:GRPCTestApi.ConvertResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr conv_;
  mutable int _cached_size_;
  friend struct ::protobuf_grpctest_2eproto::TableStruct;
  friend void ::protobuf_grpctest_2eproto::InitDefaultsConvertResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTimeRequest

// string currenttime = 1;
inline void GetTimeRequest::clear_currenttime() {
  currenttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTimeRequest::currenttime() const {
  // @@protoc_insertion_point(field_get:GRPCTestApi.GetTimeRequest.currenttime)
  return currenttime_.GetNoArena();
}
inline void GetTimeRequest::set_currenttime(const ::std::string& value) {
  
  currenttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GRPCTestApi.GetTimeRequest.currenttime)
}
#if LANG_CXX11
inline void GetTimeRequest::set_currenttime(::std::string&& value) {
  
  currenttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GRPCTestApi.GetTimeRequest.currenttime)
}
#endif
inline void GetTimeRequest::set_currenttime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currenttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GRPCTestApi.GetTimeRequest.currenttime)
}
inline void GetTimeRequest::set_currenttime(const char* value, size_t size) {
  
  currenttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GRPCTestApi.GetTimeRequest.currenttime)
}
inline ::std::string* GetTimeRequest::mutable_currenttime() {
  
  // @@protoc_insertion_point(field_mutable:GRPCTestApi.GetTimeRequest.currenttime)
  return currenttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTimeRequest::release_currenttime() {
  // @@protoc_insertion_point(field_release:GRPCTestApi.GetTimeRequest.currenttime)
  
  return currenttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTimeRequest::set_allocated_currenttime(::std::string* currenttime) {
  if (currenttime != NULL) {
    
  } else {
    
  }
  currenttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currenttime);
  // @@protoc_insertion_point(field_set_allocated:GRPCTestApi.GetTimeRequest.currenttime)
}

// -------------------------------------------------------------------

// GetTimeResponse

// string currenttime = 1;
inline void GetTimeResponse::clear_currenttime() {
  currenttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTimeResponse::currenttime() const {
  // @@protoc_insertion_point(field_get:GRPCTestApi.GetTimeResponse.currenttime)
  return currenttime_.GetNoArena();
}
inline void GetTimeResponse::set_currenttime(const ::std::string& value) {
  
  currenttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GRPCTestApi.GetTimeResponse.currenttime)
}
#if LANG_CXX11
inline void GetTimeResponse::set_currenttime(::std::string&& value) {
  
  currenttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GRPCTestApi.GetTimeResponse.currenttime)
}
#endif
inline void GetTimeResponse::set_currenttime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currenttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GRPCTestApi.GetTimeResponse.currenttime)
}
inline void GetTimeResponse::set_currenttime(const char* value, size_t size) {
  
  currenttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GRPCTestApi.GetTimeResponse.currenttime)
}
inline ::std::string* GetTimeResponse::mutable_currenttime() {
  
  // @@protoc_insertion_point(field_mutable:GRPCTestApi.GetTimeResponse.currenttime)
  return currenttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTimeResponse::release_currenttime() {
  // @@protoc_insertion_point(field_release:GRPCTestApi.GetTimeResponse.currenttime)
  
  return currenttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTimeResponse::set_allocated_currenttime(::std::string* currenttime) {
  if (currenttime != NULL) {
    
  } else {
    
  }
  currenttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currenttime);
  // @@protoc_insertion_point(field_set_allocated:GRPCTestApi.GetTimeResponse.currenttime)
}

// -------------------------------------------------------------------

// GetServerNameRequest

// string name = 1;
inline void GetServerNameRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServerNameRequest::name() const {
  // @@protoc_insertion_point(field_get:GRPCTestApi.GetServerNameRequest.name)
  return name_.GetNoArena();
}
inline void GetServerNameRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GRPCTestApi.GetServerNameRequest.name)
}
#if LANG_CXX11
inline void GetServerNameRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GRPCTestApi.GetServerNameRequest.name)
}
#endif
inline void GetServerNameRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GRPCTestApi.GetServerNameRequest.name)
}
inline void GetServerNameRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GRPCTestApi.GetServerNameRequest.name)
}
inline ::std::string* GetServerNameRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GRPCTestApi.GetServerNameRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServerNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:GRPCTestApi.GetServerNameRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerNameRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GRPCTestApi.GetServerNameRequest.name)
}

// -------------------------------------------------------------------

// GetServerNameResponse

// string name = 1;
inline void GetServerNameResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServerNameResponse::name() const {
  // @@protoc_insertion_point(field_get:GRPCTestApi.GetServerNameResponse.name)
  return name_.GetNoArena();
}
inline void GetServerNameResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GRPCTestApi.GetServerNameResponse.name)
}
#if LANG_CXX11
inline void GetServerNameResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GRPCTestApi.GetServerNameResponse.name)
}
#endif
inline void GetServerNameResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GRPCTestApi.GetServerNameResponse.name)
}
inline void GetServerNameResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GRPCTestApi.GetServerNameResponse.name)
}
inline ::std::string* GetServerNameResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GRPCTestApi.GetServerNameResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServerNameResponse::release_name() {
  // @@protoc_insertion_point(field_release:GRPCTestApi.GetServerNameResponse.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerNameResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GRPCTestApi.GetServerNameResponse.name)
}

// -------------------------------------------------------------------

// ConvertRequest

// string conv = 1;
inline void ConvertRequest::clear_conv() {
  conv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConvertRequest::conv() const {
  // @@protoc_insertion_point(field_get:GRPCTestApi.ConvertRequest.conv)
  return conv_.GetNoArena();
}
inline void ConvertRequest::set_conv(const ::std::string& value) {
  
  conv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GRPCTestApi.ConvertRequest.conv)
}
#if LANG_CXX11
inline void ConvertRequest::set_conv(::std::string&& value) {
  
  conv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GRPCTestApi.ConvertRequest.conv)
}
#endif
inline void ConvertRequest::set_conv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GRPCTestApi.ConvertRequest.conv)
}
inline void ConvertRequest::set_conv(const char* value, size_t size) {
  
  conv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GRPCTestApi.ConvertRequest.conv)
}
inline ::std::string* ConvertRequest::mutable_conv() {
  
  // @@protoc_insertion_point(field_mutable:GRPCTestApi.ConvertRequest.conv)
  return conv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConvertRequest::release_conv() {
  // @@protoc_insertion_point(field_release:GRPCTestApi.ConvertRequest.conv)
  
  return conv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConvertRequest::set_allocated_conv(::std::string* conv) {
  if (conv != NULL) {
    
  } else {
    
  }
  conv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conv);
  // @@protoc_insertion_point(field_set_allocated:GRPCTestApi.ConvertRequest.conv)
}

// -------------------------------------------------------------------

// ConvertResponse

// string conv = 1;
inline void ConvertResponse::clear_conv() {
  conv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConvertResponse::conv() const {
  // @@protoc_insertion_point(field_get:GRPCTestApi.ConvertResponse.conv)
  return conv_.GetNoArena();
}
inline void ConvertResponse::set_conv(const ::std::string& value) {
  
  conv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GRPCTestApi.ConvertResponse.conv)
}
#if LANG_CXX11
inline void ConvertResponse::set_conv(::std::string&& value) {
  
  conv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GRPCTestApi.ConvertResponse.conv)
}
#endif
inline void ConvertResponse::set_conv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GRPCTestApi.ConvertResponse.conv)
}
inline void ConvertResponse::set_conv(const char* value, size_t size) {
  
  conv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GRPCTestApi.ConvertResponse.conv)
}
inline ::std::string* ConvertResponse::mutable_conv() {
  
  // @@protoc_insertion_point(field_mutable:GRPCTestApi.ConvertResponse.conv)
  return conv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConvertResponse::release_conv() {
  // @@protoc_insertion_point(field_release:GRPCTestApi.ConvertResponse.conv)
  
  return conv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConvertResponse::set_allocated_conv(::std::string* conv) {
  if (conv != NULL) {
    
  } else {
    
  }
  conv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conv);
  // @@protoc_insertion_point(field_set_allocated:GRPCTestApi.ConvertResponse.conv)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GRPCTestApi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_grpctest_2eproto__INCLUDED
