// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpctest.proto

#include "grpctest.pb.h"
#include "grpctest.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GRPCTestApi {

static const char* GRPCTestApiSrv_method_names[] = {
  "/GRPCTestApi.GRPCTestApiSrv/GetTime",
  "/GRPCTestApi.GRPCTestApiSrv/GetServerName",
  "/GRPCTestApi.GRPCTestApiSrv/Convert",
};

std::unique_ptr< GRPCTestApiSrv::Stub> GRPCTestApiSrv::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GRPCTestApiSrv::Stub> stub(new GRPCTestApiSrv::Stub(channel));
  return stub;
}

GRPCTestApiSrv::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTime_(GRPCTestApiSrv_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerName_(GRPCTestApiSrv_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Convert_(GRPCTestApiSrv_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GRPCTestApiSrv::Stub::GetTime(::grpc::ClientContext* context, const ::GRPCTestApi::GetTimeRequest& request, ::GRPCTestApi::GetTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTime_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::GRPCTestApi::GetTimeResponse>* GRPCTestApiSrv::Stub::AsyncGetTimeRaw(::grpc::ClientContext* context, const ::GRPCTestApi::GetTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GRPCTestApi::GetTimeResponse>::Create(channel_.get(), cq, rpcmethod_GetTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCTestApi::GetTimeResponse>* GRPCTestApiSrv::Stub::PrepareAsyncGetTimeRaw(::grpc::ClientContext* context, const ::GRPCTestApi::GetTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GRPCTestApi::GetTimeResponse>::Create(channel_.get(), cq, rpcmethod_GetTime_, context, request, false);
}

::grpc::Status GRPCTestApiSrv::Stub::GetServerName(::grpc::ClientContext* context, const ::GRPCTestApi::GetServerNameRequest& request, ::GRPCTestApi::GetServerNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetServerName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::GRPCTestApi::GetServerNameResponse>* GRPCTestApiSrv::Stub::AsyncGetServerNameRaw(::grpc::ClientContext* context, const ::GRPCTestApi::GetServerNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GRPCTestApi::GetServerNameResponse>::Create(channel_.get(), cq, rpcmethod_GetServerName_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCTestApi::GetServerNameResponse>* GRPCTestApiSrv::Stub::PrepareAsyncGetServerNameRaw(::grpc::ClientContext* context, const ::GRPCTestApi::GetServerNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GRPCTestApi::GetServerNameResponse>::Create(channel_.get(), cq, rpcmethod_GetServerName_, context, request, false);
}

::grpc::Status GRPCTestApiSrv::Stub::Convert(::grpc::ClientContext* context, const ::GRPCTestApi::ConvertRequest& request, ::GRPCTestApi::ConvertResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Convert_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::GRPCTestApi::ConvertResponse>* GRPCTestApiSrv::Stub::AsyncConvertRaw(::grpc::ClientContext* context, const ::GRPCTestApi::ConvertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GRPCTestApi::ConvertResponse>::Create(channel_.get(), cq, rpcmethod_Convert_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCTestApi::ConvertResponse>* GRPCTestApiSrv::Stub::PrepareAsyncConvertRaw(::grpc::ClientContext* context, const ::GRPCTestApi::ConvertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GRPCTestApi::ConvertResponse>::Create(channel_.get(), cq, rpcmethod_Convert_, context, request, false);
}

GRPCTestApiSrv::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCTestApiSrv_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCTestApiSrv::Service, ::GRPCTestApi::GetTimeRequest, ::GRPCTestApi::GetTimeResponse>(
          std::mem_fn(&GRPCTestApiSrv::Service::GetTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCTestApiSrv_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCTestApiSrv::Service, ::GRPCTestApi::GetServerNameRequest, ::GRPCTestApi::GetServerNameResponse>(
          std::mem_fn(&GRPCTestApiSrv::Service::GetServerName), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCTestApiSrv_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCTestApiSrv::Service, ::GRPCTestApi::ConvertRequest, ::GRPCTestApi::ConvertResponse>(
          std::mem_fn(&GRPCTestApiSrv::Service::Convert), this)));
}

GRPCTestApiSrv::Service::~Service() {
}

::grpc::Status GRPCTestApiSrv::Service::GetTime(::grpc::ServerContext* context, const ::GRPCTestApi::GetTimeRequest* request, ::GRPCTestApi::GetTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCTestApiSrv::Service::GetServerName(::grpc::ServerContext* context, const ::GRPCTestApi::GetServerNameRequest* request, ::GRPCTestApi::GetServerNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCTestApiSrv::Service::Convert(::grpc::ServerContext* context, const ::GRPCTestApi::ConvertRequest* request, ::GRPCTestApi::ConvertResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GRPCTestApi

