// unpack.h header file

#ifndef _DEFINED_4AFD424F_87A7_419e_832C_F8FC0AA1BC2E
 
#define _DEFINED_4AFD424F_87A7_419e_832C_F8FC0AA1BC2E
// Generated by GUIDGEN in Registry format


#if _MSC_VER > 1000  //
#pragma once                  
#endif    

//for rar 

#include "stdafx.h" 
#include "stdio.h"    
#include "unrar/rar.hpp"  
#include "uncabMSCF/cabextract.h" 

#include <crtdbg.h>	

#include "untar/tar32api.h"
#include "untar/cmdline.h"

//#include "untar/tarcmd.h"
#include "untar/tar32.h"
#include "untar/tar32dll.h"
#include "untar/util.h"

#include "untar/dlg.h"
#include <mbstring.h>
#include <process.h> // _beginthread
#include <io.h>	// chmod
#include <sys/utime.h> // utime
#include <time.h> // time
#include <sys/types.h>
#include <sys/stat.h>
#include <strstream>




class CTar32CmdInfo
{
public:
	struct CArgs{
		CArgs(const string &f, const string &dir) : file(f), current_dir(dir){};
		string file;
		string current_dir;
	};
	CTar32CmdInfo(char *s, int len) : output(s,len), exception("",0){
		hTar32StatusDialog = NULL;
		b_use_directory = true;
		b_display_dialog = true;
		b_message_loop = true;
		b_print = false;

		b_archive_tar = true;
		archive_type = ARCHIVETYPE_NORMAL;
		compress_level = 0;
		
		wm_main_thread_end = 0;
		hParentWnd = NULL;
		idMessageThread = 0;

	};
	string arcfile;
	list<CArgs> argfiles;
	// list<string> files;
	strstream output;
	HWND hTar32StatusDialog;
	CTar32Exception exception;

	bool b_use_directory;
	bool b_display_dialog;
	bool b_message_loop;
	bool b_print;

	bool b_archive_tar;
	int archive_type;
	int compress_level;

	UINT wm_main_thread_end;
	HWND hParentWnd;
	DWORD idMessageThread;
	char command;
};

static bool extract_fileTar(CTar32CmdInfo &cmdinfo, CTar32 *pTarfile, const char *fname,const char *dir);


                                                 
#ifdef __cplusplus  
extern "C" {                                     
#endif // 
                                                             
#ifdef _COMPILING_4AFD424F_87A7_419e_832C_F8FC0AA1BC2E

#define LIBSPEC __declspec(dllexport)                  
#else                                                    
#define LIBSPEC __declspec(dllimport)               
#endif // _COMPILING_4AFD424F-87A7-419e-832C-F8FC0AA1BC2E

	

#include "unzip/unzip.h" 
#include "unarj/arj.h"  
#include <fcntl.h>      // open()
#include <stdio.h>      // printf() sprintf() remove()
#include <stdlib.h>     // malloc()
#include <string.h>     // str*()
#include <io.h>
#include "unace/unace.h"  
#include "unace/os.h"
#include "unace/unace.h"  
#include "unace/os.h"
#include "unace/globals.h"
#include "unace/portable.h"
#include "unace/uac_comm.h"
#include "unace/uac_crc.h"
#include "unace/uac_crt.h"
#include "unace/uac_dcpr.h"
#include "unace/uac_sys.h"

#include "uncabIs/i6comp.h"


struct hand
{ 
	struct List* arjlist;
	struct Node* arjnode;
	const char * ArjFileName;

};
struct HandRar
{ 
 CommandData Cmd;
 CmdExtract Extract;
 Archive ArcR;

};

struct HandCab
{
    EXTRACTINFO rwHnd;
	LPCABFILELIST pCurrent;
	char * Path;
	
};


unsigned long timeP;
unsigned long timeN;
char * FileP;
char * FileN;

#define HANDZIP unzFile    
#define HANDRAR  HandRar*
#define HANDACE int 
#define HANDARJ struct hand*
#define HANDCABMS struct file* 
#define HANDCABIS  struct HandCab*


//LIBSPEC linkagetype resulttype name(parameters);   
//FOR UNZIP

LIBSPEC  HANDZIP Zip_OpenArchive(const char * ZipfileName);
LIBSPEC  BOOL Zip_CloseArchive(HANDZIP ZipFile);
LIBSPEC  BOOL Zip_GetFirstFile(HANDZIP ZipFile,const char * Directory,char *FileReturn);
LIBSPEC  BOOL Zip_GetNextFile(HANDZIP ZipFile,const char * Directory,char *FileReturn);


//FOR UNRAR
bool  success;
bool  Repeat;
LIBSPEC CommandData Cmd;
LIBSPEC CmdExtract Extract;
LIBSPEC Archive ArcR;//(&Cmd);

LIBSPEC   HANDRAR Rar_OpenArchive(const char * ZipfileName,const char *Directory);
LIBSPEC   BOOL Rar_CloseArchive(HANDRAR ZipFile);
LIBSPEC   BOOL Rar_GetFirstFile(HANDRAR ZipFile, char *FileReturn);
LIBSPEC   BOOL Rar_GetNextFile(HANDRAR ZipFile, char *FileReturn);





//FOR UNARJ

 

LIBSPEC  HANDARJ Arj_OpenArchive(const char * ArjfileName);
LIBSPEC  BOOL Arj_CloseArchive(HANDARJ ArjFile);
LIBSPEC  BOOL Arj_GetFirstFile(HANDARJ ArjFile,const char * Directory,char * FileRet);
LIBSPEC  BOOL Arj_GetNextFile(HANDARJ ArjFile,const char * Directory,char * FileRet);




//FOR UNACE 

LIBSPEC  HANDACE Ace_OpenArchive(const char * AcefileName);
LIBSPEC  BOOL Ace_CloseArchive(HANDACE AceFile);
LIBSPEC  BOOL Ace_GetFirstFile(HANDACE AceFile,const char * Directory,char * FileRet);
LIBSPEC  BOOL Ace_GetNextFile(HANDACE AceFile,const char * Directory,char * FileRet);





//FOR Microsoft UNCAB

LIBSPEC  HANDCABMS Cab_OpenArchive(const char * CabfileName);
LIBSPEC  BOOL Cab_CloseArchive(HANDCABMS CabFile);
LIBSPEC  BOOL  Cab_GetFirstFile(HANDCABMS &CabFile,const char * Directory,char *FileReturn);
LIBSPEC  BOOL  Cab_GetNextFile(HANDCABMS &CabFile,const char * Directory,char *FileReturn);



//FOR InstallShield  UNCAB

LIBSPEC  HANDCABIS CabIS_OpenArchive(const char * CabfileName,const char * Directory);
LIBSPEC  BOOL CabIS_CloseArchive(HANDCABIS CabFile);
LIBSPEC  BOOL  CabIS_GetFirstFile(HANDCABIS CabFile,char *FileReturn);
LIBSPEC  BOOL  CabIS_GetNextFile(HANDCABIS CabFile,char *FileReturn);



//For tar,gzip,
//char _szOutput[1000];
struct HandTar
{


//	CTar32CmdInfo *cmd;//=new CTar32CmdInfo;
//	CTar32 *tar;//=new CTar32;
    char szOutput[1000];
	char direct[1000];
    /*HandTar()
	{
		CTar32CmdInfo cmd(szOutput,999);
		CTar32 tar;

	};
	~HandTar()
	{ 
		tar.close();

	};*/

};
#define  HANDTAR HandTar*
char _szOutput[1000];
LIBSPEC CTar32CmdInfo cmdinfo(_szOutput,999);
LIBSPEC CTar32 tarfile;




LIBSPEC  HANDTAR Tar_OpenArchive(const char * TarfileName,const char * Directory);
LIBSPEC  BOOL  Tar_CloseArchive(HANDTAR TarFile);
LIBSPEC  BOOL  Tar_GetFirstFile(HANDTAR TarFile,char *FileReturn);
LIBSPEC  BOOL  Tar_GetNextFile(HANDTAR TarFile,char *FileReturn);

#include "unlha/lha/lha.h"
struct LHA
{
    LzHeader  hdr;
	long      pos;
	FILE     *afp;
};


#define HANDLHA LHA*

LIBSPEC  HANDLHA LHA_OpenArchive(const char * LHAfileName,const char * Directory);
LIBSPEC  BOOL  LHA_CloseArchive(HANDLHA LHAFile);
LIBSPEC  BOOL  LHA_GetFirstFile(HANDLHA LHAFile,char *FileReturn);
LIBSPEC  BOOL  LHA_GetNextFile(HANDLHA LHAFile,char *FileReturn);


// ...                   
//#undef LIBSPEC   //
                                                                
#ifdef __cplusplus    
  }                                                   
#endif // __cplusplus  




#endif // _DEFINED_4AFD424F-87A7-419e-832C-F8FC0AA1BC2E

